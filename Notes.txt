let’s review the link created when converting between an array and ArrayList.
4: String[] array = { "gerbil", "mouse" }; // [gerbil, mouse]
5: List<String> list = Arrays.asList(array); // returns fixed size list
6: list.set(1, "test"); // [gerbil, test]
7: array[0] = "new"; // [new, test]
8: String[] array2 = (String[]) list.toArray(); // [new, test]
9: list.remove(1); // throws UnsupportedOperationException

Lines 6 and 7 show that you can change the elements in
either the array or the List. Changes are reflected in both, since they are backed by the
same data.

line 9 shows that list is not resizable because it is backed by the underlying
array.


You’d have to convert the array to a
List and then the List to a Set

===========================================

Autoboxing automatically converts a primitive to the corresponding wrapper classes
unboxing automatically converts a wrapper class back to a primitive

3: List<Integer> numbers = new ArrayList<Integer>();
4: numbers.add(1);
5: numbers.add(new Integer(3));
6: numbers.add(new Integer(5));
7: numbers.remove(1);
8: numbers.remove(new Integer(5));
9: System.out.println(numbers);

The answer is it leaves just [1].

line 4 relies on autoboxing

The remove() method is overloaded. One signature takes
an int as the index of the element to remove. The other takes an Object that should be
removed.

Java also converts the wrapper classes to primitives via unboxing:
int num = numbers.get(0);

============================================
